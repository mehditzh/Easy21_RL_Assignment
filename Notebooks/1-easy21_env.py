# -*- coding: utf-8 -*-
"""easy21_env.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q0hAJ5Boaw5a1w00_dwlFFqt_YdTKQVW
"""

#Assignment Q1: Write an Environment to Implement the Game Easy21


"""
define a function "step" which takes an inpute "s" and an action "a",
and returns a sample of the next s' and reward r.
"""
#state s: dealers first card 1-10 and players sum 1-21
#action a: hit or stick


import random
class easy21(object):

    '''initiazlize useful attributes(variables):

       d_first:   Dealer's first card value which is shown to the player
       p_sum:     Sum of player's cards values
       d_sum:     Sum of dealer's cards values
       s:         state of the game ---> [dealer's first card, player's sum]'''
    def __init__(self):
        self.d_first = 0
        self.p_sum = 0
        self.d_sum = 0
        self.s = [self.d_first, self.p_sum]

    def get_p_sum(self):
        return self.p_sum
    def get_d_sum(self):
        return self.d_sum
    def get_d_first(self):
        return self.d_first
    def get_s(self):
        return self.s

    def set_p_sum(self, new_p_card):
        self.p_sum += new_p_card
    def set_d_sum(self, new_d_card):
        self.d_sum += new_d_card
    def set_d_first(self, new_d_first):
        self.d_first = new_d_first
    def set_s(self, dealer_first, player_sum):
        self.s = [dealer_first, player_sum]

    '''this method deals the first cards to the player and dealer
    and returns the state of the game'''
    def deal_cards(self):
        card_vals = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        self.set_d_first(card_vals[random.randint(0,9)])
        self.set_d_sum(self.d_first)
        self.set_p_sum(card_vals[random.randint(0,9)])
        self.set_s(self.d_first, self.p_sum)
        return self.s

    '''this method tells us if one of the dealer or player has gone bust
    meaning the sum of their cards is out of the range 1-21'''
    def goes_bust(self):
        if self.d_sum > 21 or self.d_sum < 1:
            return True
        elif self.p_sum > 21 or self.p_sum < 1:
            return True
        else:
            return False

    #this method is used to draw a new card from the pile for the player or dealer
    #returns the change it makes to the sum of card values
    def hit(self):

        #black cards with + and red cards with - impact on sum of values
        b_cards = [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10)]
        r_cards = [(-1, 1), (-1, 2), (-1, 3), (-1, 4), (-1, 5), (-1, 6), (-1, 7), (-1, 8), (-1, 9), (-1, 10)]

        select_color = random.uniform(0, 1)
        select_num = random.randint(0, 9)

        #probability of drawing black cards is 2/3 and red is 1/3
        if select_color > (2/3):
            card = r_cards[select_num]
        else:
            card = b_cards[select_num]

        return card[0] * card[1]

    '''method step takes the action and state as input
    and returns the result state and reward'''
    def step(self, action):
        new_card=0
        #stick = 0 and hit = 1
        reward = 0
        if action == 0:
            dealer_sum = [self.d_sum]

            '''if player chooses to stick, the dealers keeps to hit as long as
            his/her sum of cards is between 1 and 16'''
            while self.d_sum > 0 and self.d_sum < 17:
                self.set_d_sum(self.hit())
                dealer_sum.append(self.d_sum)

            if self.goes_bust():
                reward = 1
            elif self.p_sum > self.d_sum:
                reward = 1
            elif self.p_sum < self.d_sum:
                reward = -1

        else:
            new_card = self.hit()
            self.set_p_sum(new_card)
            if self.goes_bust():
                reward = -1

        self.set_s(self.d_first, self.p_sum)

        return self.s, reward